#!/usr/bin/env lua

-- The MIT License (MIT)
--
-- Copyright (c) 2015 Stefan Beckert
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

-- SETTINGS START
local CENTER    = 63
local NODIFFCOL = "\027[37m"
local NEWFILECOL= "\027[1m"
local NEWDIFFCOL= "\027[35m"
local REMOVEDCOL= "\027[31m"
local ADDEDCOL  = "\027[32m"
local REMOVEBCOL= "\027[31;1m"
local ADDEDBCOL = "\027[32;1m"
local DIFFERSCOL= "\027[36m"
-- SETTINGS END

local ffproto= {}

function ffproto:count()
    assert(self.cnt>=0 and self.start>=1)
    return self.cnt
end

function ffproto:push(item)
    assert(self.cnt>=0 and self.start>=1)
    assert(item~=nil, "Not allowed to push nil")
    self.fifo[self.start+self.cnt]= item
    self.cnt= self.cnt+1
end

function ffproto:pull()
    assert(self.cnt>=0 and self.start>=1)
    if self.cnt==0 then return nil end
    local item= self.fifo[self.start]
    self.fifo[self.start]= nil
    self.cnt= self.cnt-1
    self.start= (self.cnt==0) and 1 or self.start+1
    return item
end

local function ffnew()
    local self= {
        fifo= {},
        start= 1,
        cnt= 0
    }
    setmetatable(self, {__index= ffproto})
    return self
end

-- Chunk-Globals:
local COLOFF    = "\027[0m\n"
local diffcmd   = "diff -Nurt "
local diffcmdlen= diffcmd:len()
local ffleft    = ffnew()
local ffright   = ffnew()
local cols      = tonumber(io.popen("tput cols"):read()) or CENTER*2
if cols<5 then cols= 65 end
local center    = math.floor(cols/2)
local lnum, rnum

local function getspace(len)
    return string.rep(" ", len)
end

local function utf8len(str)
    -- fall back to simple byte len on non-utf8 byte sequences:
    return utf8.len(str) or str:len()
end

local function utf8prefix(str, len)
    local pos= utf8.offset(str, len+1)
    if pos then
        str= str:sub(1, pos-1)
    end
    return str
end

local function simpleprefix(str, len)
    return str:sub(1, len)
end

string.reallen= utf8 and utf8len or string.len
string.prefix = utf8 and utf8prefix or simpleprefix

local function maxlen(num, str)
    num= type(num)=="number" and string.format("%d", num) or num
    str= num.." "..(str or "")
    return str:prefix(center-1)
end

local function tolen(num, str)
    str= maxlen(num, str)
    return str..getspace(center - str:reallen())
end

local function pull()
    local left = ffleft:pull()
    local right= ffright:pull()
    if left==nil and right==nil then
        return
    end
    return true, left, right
end

local colorsByColumnCount= {
    [true] = {[true]= DIFFERSCOL, [false]= REMOVEDCOL},
    [false]= {[true]= ADDEDCOL}
}

local function purgediffs()
    local color= colorsByColumnCount[ffleft:count()>0][ffright:count()>0]
    if not color then
        return
    end
    for _, itl, itr in pull do
        local ln= itl and lnum or getspace(#(string.format("%d",lnum)))
        local rn= itr and rnum or getspace(#(string.format("%d",rnum)))
        io.write(color, tolen(ln, itl), maxlen(rn, itr),COLOFF)
        if itl then lnum= lnum+1 end
        if itr then rnum= rnum+1 end
    end
    return true
end

local function each_line()
    local line= coroutine.yield()
    local col1= line:sub(1, 1)
    if col1 == "d" then
        return "nextfile", line -- multistep continue
    elseif col1 == "@" then
        return "nextdiff", line -- continue
    end
    local ine= line:sub(2)
    if col1 == " " then
        purgediffs()
        io.write(NODIFFCOL,tolen(lnum,ine),maxlen(rnum,ine),COLOFF)
        lnum= lnum+1
        rnum= rnum+1
        return
    elseif col1 == "-" then
        ffleft:push(ine)
        return
    elseif col1 == "+" then
        ffright:push(ine)
        return
    elseif col1 == "\\" then -- no line feed at EOF
        -- !!! Should be printed after end of diff push phase !!!
        io.write(line, "\n")
        return
    end
    io.write(NEWFILECOL, "ERROR: Unknown line start pattern", COLOFF)
    return "nextfile", line -- multistep continue
end

local coro= coroutine.create(function(line)
    while true do -- each file:
        purgediffs() -- print pending diffs at end of last file
        if line:sub(1, diffcmdlen) == diffcmd then
            io.write(NEWFILECOL, line, COLOFF)
            line= coroutine.yield()
        end
        if line:sub(1,4) ~= "--- " then
            io.write(line, "\n")
            line= coroutine.yield()
            goto nextfile -- continue
        end
        io.write(REMOVEBCOL, line, COLOFF)
        io.write(ADDEDBCOL, coroutine.yield(), COLOFF)
        line= coroutine.yield()
        while true do -- each diffsection:
            assert(not purgediffs())
            -- get line number:
            lnum, rnum= line:match("@@ %-(%d+).* %+(%d+).* @@")
            local fill= math.floor((cols - line:reallen()) /2)
            io.write(NEWDIFFCOL, line, string.rep(" -", fill), COLOFF)
            local stop
            repeat stop, line= each_line() until stop
            if stop == "nextfile" then goto nextfile end
        end
    ::nextfile::
    end
end)

local args= "'"..table.concat(arg, "' '").."'"
for line in io.popen(diffcmd..args):lines() do
    -- remove trailing garbage from CRLF etc ending files:
    while true do
        local last= line:sub(-1)
        if last ~= "\n" and last ~= "\r" then break end
        line= line:sub(1, -2)
    end
    --io.write(line, "\n")
    assert(coroutine.resume(coro, line))
end
purgediffs()
