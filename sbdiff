#!/usr/bin/env lua

-- The MIT License (MIT)
--
-- Copyright (c) 2015 Stefan Beckert
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

-- SETTINGS START
local DIFFPOS= 65

local nodiffcol = "\027[37m"
local newfilecol= "\027[1m"
local newdiffcol= "\027[35m"
local removedcol= "\027[31m"
local addedcol  = "\027[32m"
local removebcol= "\027[31;1m"
local addedbcol = "\027[32;1m"
local differscol= "\027[36m"
local coloff    = "\027[0m\n"
-- SETTINGS END

local function ffnew()
    return {
        fifo= {},
        start= 1,
        cnt= 0
    }
end

local function ffpush(ff, item)
    assert(ff.cnt>=0 and ff.start>=1)
    assert(item~=nil, "Not allowed to push nil")
    ff.fifo[ff.start+ff.cnt]= item
    ff.cnt= ff.cnt+1
    return ff.cnt
end

local function ffpull(ff)
    assert(ff.cnt>=0 and ff.start>=1)
    if ff.cnt==0 then return nil end
    local item= ff.fifo[ff.start]
    ff.fifo[ff.start]= nil
    ff.cnt= ff.cnt-1
    ff.start= (ff.cnt==0) and 1 or ff.start+1
    return item, ff.cnt
end

local function getspace(len)
    if len <= 0 then return "" end
    local spaces= {}
    for i= 1,len do spaces[#spaces+1]= " " end
    return table.concat(spaces)
end

local function trim(str)
    str= str:sub(1, DIFFPOS)
    return str..getspace(DIFFPOS-str:len())
end

local diffcmd= "diff -urt "
local diffcmdlen= diffcmd:len()
local ffleft, ffright

local function pull()
    local left= ffpull(ffleft)
    local right= ffpull(ffright)
    if left==nil and right==nil then
        return nil 
    end
    assert(left or right)
    return {[1]=left, [2]=right}
end

local function reset()
    ffleft = ffnew()
    ffright= ffnew()
end

local function purgediffs()
    for item in pull do
        assert(type(item=="table"))
        assert(next(item))
        if item[1] and item[2] then
            io.write(differscol, trim(item[1]), "  ", trim(item[2]), coloff)
        elseif item[1] then
            assert(item[2]==nil)
            io.write(removedcol, trim(item[1]), "  ", coloff)
        elseif item[2] then
            assert(item[1]==nil)
            io.write(addedcol, trim(""), "  ", trim(item[2]), coloff)
        else
            assert(false)
        end
    end
    reset()
end

local function corobody(line)
    while true do -- each file:
        if line:sub(1, diffcmdlen) == diffcmd then
            io.write(newfilecol, line, coloff)
        end
        io.write(removebcol, coroutine.yield(), coloff)
        io.write(addedbcol,  coroutine.yield(), coloff)
        line= coroutine.yield()
        while true do -- each diffsection:
            io.write(newdiffcol, line, coloff)
            while true do -- each line:
                line= coroutine.yield()
                local col1= line:sub(1, 1)
                if col1 == "d" then
                    goto nextfile
                elseif col1 == "@" then
                    goto nextdiff
                end
                line= line:sub(2, DIFFPOS)
                if col1 == " " then
                    purgediffs()
                    io.write(nodiffcol, trim(line,DIFFPOS), "  ", trim(line,DIFFPOS), coloff)
                elseif col1 == "-" then
                    ffpush(ffleft, line)
                else
                    assert(col1 == "+")
                    ffpush(ffright, line)
                end
            end
        ::nextdiff::
        end
    ::nextfile::
    end
end

reset()
local coro= coroutine.create(corobody)
for line in io.popen(diffcmd..arg[1].." "..arg[2]):lines() do
    assert(coroutine.resume(coro, line))
end
