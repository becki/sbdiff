#!/usr/bin/env lua

-- The MIT License (MIT)
--
-- Copyright (c) 2015 Stefan Beckert
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

-- SETTINGS START
local CENTER    = 63
local nodiffcol = "\027[37m"
local newfilecol= "\027[1m"
local newdiffcol= "\027[35m"
local removedcol= "\027[31m"
local addedcol  = "\027[32m"
local removebcol= "\027[31;1m"
local addedbcol = "\027[32;1m"
local differscol= "\027[36m"
local coloff    = "\027[0m\n"
-- SETTINGS END

local function ffnew()
    return {
        fifo= {},
        start= 1,
        cnt= 0
    }
end

local function ffpush(ff, item)
    assert(ff.cnt>=0 and ff.start>=1)
    assert(item~=nil, "Not allowed to push nil")
    ff.fifo[ff.start+ff.cnt]= item
    ff.cnt= ff.cnt+1
    return ff.cnt
end

local function ffpull(ff)
    assert(ff.cnt>=0 and ff.start>=1)
    if ff.cnt==0 then return nil end
    local item= ff.fifo[ff.start]
    ff.fifo[ff.start]= nil
    ff.cnt= ff.cnt-1
    ff.start= (ff.cnt==0) and 1 or ff.start+1
    return item, ff.cnt
end

-- Chunk-Globals:
local center
local diffcmd= "diff -Nurt "
local diffcmdlen= diffcmd:len()
local ffleft, ffright
local lnum, rnum
local strlen = utf8 and utf8.len or str.len
local spacecache= {}

local function getspace(len)
    if len <= 0 then return "" end
    local spaces= spacecache[len]
    if spaces then return spaces end
    spaces= {}
    for i= 1,len do spaces[#spaces+1]= " " end
    spaces= table.concat(spaces)
    spacecache[len]= spaces
    return spaces
end

local function trim(num, str)
    num= type(num)=="number" and string.format("%d", num) or num
    str= num.." "..(str or "")
    str= str:sub(1, center-1)
    return str..getspace(center - strlen(str))
end

local function pull()
    local left= ffpull(ffleft)
    local right= ffpull(ffright)
    if left==nil and right==nil then
        return nil
    end
    return {left, right}
end

local function purgediffs()
    if ffleft.cnt == 0 and ffright.cnt == 0 then 
        return
    end
    local color= addedcol
    if ffleft.cnt > 0 and ffright.cnt > 0 then
        color= differscol
    elseif ffleft.cnt > 0 then
        color= removedcol
    else
        assert(ffleft.cnt == 0 and ffright.cnt > 0)
    end
    for item in pull do
        assert(type(item=="table") and next(item))
        local itl, itr= item[1], item[2]
        local ln= itl and lnum or getspace(#(string.format("%d",lnum)))
        local rn= itr and rnum or getspace(#(string.format("%d",rnum)))
        io.write(color, trim(ln, itl), trim(rn, itr),coloff)
        if itl then lnum= lnum+1 end
        if itr then rnum= rnum+1 end
    end
    return true
end

local function corobody(line)
    while true do -- each file:
        purgediffs() -- print pending diffs at end of last file
        if line:sub(1, diffcmdlen) == diffcmd then
            io.write(newfilecol, line, coloff)
            line= coroutine.yield()
        end
        if line:sub(1,4) ~= "--- " then
            io.write(line, "\n")
            line= coroutine.yield()
            goto nextfile -- continue
        end
        io.write(removebcol, line, coloff)
        io.write(addedbcol, coroutine.yield(), coloff)
        line= coroutine.yield()
        while true do -- each diffsection:
            assert(not purgediffs())
            -- get line number:
            lnum, rnum= line:match("@@ %-(%d+).* %+(%d+).* @@")
            io.write(newdiffcol, line, coloff)
            while true do -- each line:
                line= coroutine.yield()
                local col1= line:sub(1, 1)
                if col1 == "d" then
                    goto nextfile -- multistep continue
                elseif col1 == "@" then
                    goto nextdiff -- multistep continue
                end
                local ine= line:sub(2)
                if col1 == " " then
                    purgediffs()
                    io.write(nodiffcol, trim(lnum,ine), trim(rnum,ine), coloff)
                    lnum= lnum+1
                    rnum= rnum+1
                elseif col1 == "-" then
                    ffpush(ffleft, ine)
                elseif col1 == "+" then
                    ffpush(ffright, ine)
                elseif col1 == "\\" then -- no line feed at EOF
                    -- !!! Should be printed after end of diff push phase !!!
                    io.write(line, "\n")
                else
                    goto nextfile -- multistep continue
                end
            end
        ::nextdiff::
        end
    ::nextfile::
    end
end

assert(arg[1] and arg[2], "Usage: sbdiff <dir1> <dir2>")

center= tonumber(io.popen("tput cols"):read()) or CENTER*2
if center<5 then center= 65 end
center= math.floor(center/2)

ffleft = ffnew()
ffright= ffnew()
local coro= coroutine.create(corobody)
for line in io.popen(diffcmd.."'"..arg[1].."' '"..arg[2].."'"):lines() do
    -- remove trailing garbage from CRLF etc ending files:
    while true do
        local last= line:sub(-1)
        if last ~= "\n" and last ~= "\r" then break end
        line= line:sub(1, -2)
    end
    --io.write(line, "\n")
    assert(coroutine.resume(coro, line))
end
purgediffs()
